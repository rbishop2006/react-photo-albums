{"version":3,"sources":["actions/Instruments.js","components/MyAlbums.js","components/AlbumName.js","components/PicName.js","serviceWorker.js","index.js","components/App.js"],"names":["getInstruments","Promise","resolve","reject","axios","get","then","resp","data","catch","e","props","useState","instruments","setInstruments","useEffect","className","map","instrument","key","id","to","src","url","alt","name","setInstrument","pictures","setPictures","match","params","picture","setPicture","carousel","backFolder","leftClick","rightClick","i","length","push","instrumentId","console","log","Boolean","window","location","hostname","ReactDOM","render","exact","path","component","MyAlbums","AlbumName","PicName","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.644a108c.chunk.js","sourcesContent":["import axios from \"axios\"\n\nexport function getInstruments() {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(\"/instruments\")\n      .then(resp => {\n        resolve(resp.data)\n      })\n      .catch(e => {\n        reject()\n      })\n  })\n}\n\nexport function getInstrument(id) {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(`/instruments/${id}?_embed=pictures`)\n      .then(resp => {\n        resolve(resp.data)\n      })\n      .catch(e => {\n        reject()\n      })\n  })\n}\n\nexport function getPicture(id) {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(`/pictures/${id}`)\n      .then(resp => {\n        resolve(resp.data)\n      })\n      .catch(e => {\n        reject()\n      })\n  })\n}\nexport function getPictures() {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(\"/pictures\")\n      .then(resp => {\n        resolve(resp.data)\n      })\n      .catch(e => {\n        reject()\n      })\n  })\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport \"../styles/MyAlbums.css\"\nimport { getInstruments } from \"../actions/Instruments\"\n\nexport default function(props) {\n  const [instruments, setInstruments] = useState([])\n\n  useEffect(() => {\n    getInstruments().then(data => setInstruments(data))\n  }, [])\n\n  return (\n    <div className=\"wrapperMyAlbums\">\n      <header>Instruments</header>\n      <div className=\"gridAlbums\">\n        {instruments.map(instrument => (\n          <div key={\"instrument\" + instrument.id} className=\"covers\">\n            <Link to={\"/album/\" + instrument.id}>\n              <img src={instrument.url} alt=\"Instrument\" />\n              <p>{instrument.name}</p>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport \"../styles/AlbumName.css\"\nimport { getInstrument, getInstruments } from \"../actions/Instruments\"\nimport { IoMdHome } from \"react-icons/io\"\n\nexport default function(props) {\n  const [instrument, setInstrument] = useState({})\n  const [pictures, setPictures] = useState([])\n  const [instruments, setInstruments] = useState([])\n\n  useEffect(() => {\n    getInstrument(props.match.params.id).then(instrument => {\n      setInstrument(instrument)\n\n      setPictures(instrument.pictures)\n    })\n    getInstruments().then(data => setInstruments(data))\n  }, [props.match.params])\n\n  // console.log(pictures)\n\n  return (\n    <div className=\"wrapperAlbumName\">\n      <header>\n        <Link to=\"/\">\n          <IoMdHome className=\"sideBarHome\" />\n        </Link>\n        {instrument.name}\n      </header>\n\n      <div className=\"flexSect\">\n        <div className=\"albumGroups\">\n          {instruments.map(instrument => {\n            return (\n              <div className=\"sidebar\" key={\"instrument\" + instrument.id}>\n                <Link to={\"/album/\" + instrument.id}>\n                  <p className=\"albumNums\">{instrument.name}</p>\n                </Link>\n              </div>\n            )\n          })}{\" \"}\n        </div>\n\n        <div className=\"picDisplay\">\n          {pictures.map(picture => {\n            return (\n              <Link to={\"/pic/\" + picture.id} key={\"picture\" + picture.id}>\n                <div className=\"photos\">\n                  <img src={picture.url} alt=\"moreInstruments\" />\n                  <p>{picture.name}</p>\n                </div>\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport \"../styles/PicName.css\"\nimport { getPicture, getPictures } from \"../actions/Instruments\"\n// import { getInstrument } from \"../actions/Instruments\"\nimport { IoMdHome } from \"react-icons/io\"\nimport { FaFolderOpen } from \"react-icons/fa\"\nimport { AiOutlineDoubleLeft, AiOutlineDoubleRight } from \"react-icons/ai\"\n\nexport default function(props) {\n  const [picture, setPicture] = useState([])\n  const [pictures, setPictures] = useState([])\n\n  const carousel = []\n  const backFolder = []\n\n  let leftClick = picture.id\n  let rightClick = picture.id\n\n  useEffect(() => {\n    getPicture(props.match.params.id).then(picture => {\n      setPicture(picture)\n    })\n\n    getPictures().then(data => setPictures(data))\n  }, [props.match.params])\n\n  for (var i = 0; i < pictures.length; i++) {\n    carousel.push(pictures[i].id)\n  }\n  backFolder.push(picture.instrumentId)\n  console.log(carousel)\n\n  if (leftClick === 1) {\n    leftClick = carousel.length - 1\n  } else {\n    leftClick -= 1\n  }\n  if (rightClick === carousel.length) {\n    rightClick = 1\n  } else {\n    rightClick += 1\n  }\n\n  return (\n    <div className=\"wrapperPicName\">\n      <header>\n        <Link to=\"/\">\n          <IoMdHome className=\"homeButton\" />\n        </Link>\n        {picture.name}\n        <Link to={\"/album/\" + backFolder}>\n          <FaFolderOpen className=\"folderButton\" />\n        </Link>\n      </header>\n      <div className=\"viewingPic\">\n        <Link to={\"/pic/\" + leftClick}>\n          <AiOutlineDoubleLeft className=\"leftArrow\" />\n        </Link>\n        <img src={picture.url} alt=\"instrument\" />\n        <Link to={\"/pic/\" + rightClick}>\n          <AiOutlineDoubleRight className=\"rightArrow\" />\n        </Link>\n      </div>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./styles/base.css\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport MyAlbums from \"./MyAlbums.js\"\nimport AlbumName from \"./AlbumName.js\"\nimport PicName from \"./PicName.js\"\n\nexport default props => (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={MyAlbums} />\n      <Route path=\"/album/:id\" component={AlbumName} />\n      <Route path=\"/pic/:id\" component={PicName} />\n    </div>\n  </Router>\n)\n"],"sourceRoot":""}